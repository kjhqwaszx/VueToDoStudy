* const MAX_NUM = 100
 상수개념으로 한번 선언한 값에대해 수정이 불가능하다.

* let a = 10 -> let a = 20 (재선언 불가)
한번 선언한 후 값 수정은 가능하지만, 다시 선언하는건 불가능

* 화살표 함수 

 - ES5 기준
 var sum = function(a,b){
     return a+b;
 }

 - ES6
 var sum = (a,b) => {
     return a+b;
 }
 ------------------------------------

 [Vuex]
  * 무수히 많은 컴포넌트의 데이터를 관리하기 위한 상태관리 패턴이자 라이브러리
  * React의 Flux 패턴에서 기인함

    < Flux 패턴>
      - MVC 패턴의 복잡한 데이터 흐름을 해결하는 개발 패턴

        < MVC 패턴>
        Controller -> Model -> View ( 데이터가 양방향으로 흐를 수 있다.)
                                <-
        - 문제점: 모델과 뷰의 개수가 많아지게 된다면 문제 발생 시 원인 파악이 힘들다. ( 어떤 화면에서 데이터를 잘못 변경했는지)

        < Flux 패턴 >
        Action -> Dispatcher -> Model(Store) -> View  ( 데이터가 한방향으로 흐른다 )
        - Action: 화면에서 발생하는 이벤트
        - Dispatcher: 데이터(Model)를 변경하는 방법, 메서드
        - Model: 화면에 표시할 데이터
        - View: 사용자에게 비춰지는 화면

  * 하위 컴포넌트의 개수가 많아지면 데이터 전달이 힘들어진다.
    - eventBus를 통해서 데이터를 바로 전달한다면 ? -> 가능은 하겠지만 동일한 eventBus를 사용할 경우 어떤 컴포넌트에서 호출했는지 명시적이지 않음

  * 여러 개의 컴포넌트에서 같은 데이터를 동기화할 때 편리하다.

  * Vuex 기술 요소
    - (state : data) / (getters: computed) / (mutations: methods) / (actions: 비동기 methods)

    - state(data): 여러 컴포넌트에 공유되는 데이터 
      // store.js
      state:{
        message: 'TODO it';
      }
      // TodoHeader.Vue
      <p> {{this.$store.state.message}}</p>
      
    - getters(computed): 연산된 state 값을 접근하는 속성
    - mutations(methods): state값을 변경하는 이벤트 메서드
      // store.js
      state:{num: 10},
      mutations:{
        //mutations 함수들은 state를 첫번째 인자로 받는다.
        printNumbers(state){
          return state.num
        },
        sumNumbers(state, anotherNum){
          return state.num + anotherNum
        },
        modifyState(state, payload){
          return state.num + payload.num
        }
      }
      //App.Vue
        // commit을 통해 mutations 속의 함수를 실행한다.
      this.$store.commit('printNumbers')
      this.$store.commit('sumNumbers', 20)
      this.$store.commit('modifyState',{
        str: 'passed from payload',
        num: 20
      })

      *** mutations 말고 일반 컴포넌트 methods에서 this.$store.state.num ++ 로 state값을 변경하면 안되는 이유
        - 어떤 컴포넌트에서 값을 잘못 바꾸었는지 추적할 수없다.
        - mutations을 이용해 state 값을 변경 할 경우 devtools에서 추적이 가능하다.

    - actions(async methods): 비동기 처리 로직을 선언하는 메서드
      state:{num: 10},
      mutations:{
        //mutations 함수들은 state를 첫번째 인자로 받는다.
        doubleNum(state){
          return state.num * 2
        }
      },
      actions:{
        delayDoubleNum(context){ // context로 store의 속성과 메서드 접근
          context.commit('doubleNum')
        }
      }
      //App.Vue
        // dispatch을 통해 actions 속의 함수를 실행한다.
      this.$store.dispatch('delayDoubleNum')
    
------------------------------------
[ Helper ]  

 * 각 속성을 더 쉽게 사용하는 방법
   - (state > mapState) / (getters > mapGetters) / (mutations > mapMutations) / (actions > mapActions)
   - mapState와 mapGetters는 computed에 선언해주고 mapMutations 와 mapActions 는 methods 에 선언해준다.

 * mapState & mapGetters

      < store.js >
      state:{ num:10, text:'123'}
      getters:{
        reverseMessage(state){
          return state.text.split('').reverse.join('')
        }
      }

      < App.Vue >
      import {mapState,mapGetters} from 'Vuex'
      computed:{
        ...mapState(['num', 'text'])
        // num(){return this.$store.state.num}
        // text(){return this.$store.state.text}
        
        ...mapGetters(['reverseMessage'])
      }

      <p>{{this.num}}</p> // == <p>{{this.$store.state.num}}</p>
      <p>{{this.reverseMessage}}</p> // <p>{{this.$store.getters.reverseMessage}}</p>
  
  * mapMutations & mapActions
    
    < store.js > 
    state:{msg:'test'},
    mutations:{
      clickBtn(state){
        alert(state.msg)
      }
    },
    actions:{
      delayClickBtn(context){
        setTimeout(() => context.commit('clickBtn'), 2000)
      }
    }

    < App.vue >
    methods:{
      ...mapMutations(['clickBtn']),   // == ...mapMutations( {clickBtn: "clickBtn"} ) ES6에 따라 축약 후 배열로 만들어준 것, template에서 @click = "clickBtn"으로 정의
  //  ... mapMutations({
  //       clicked: 'clickBtn'   이와 같이 선언할 경우 template에서  @click="clicked" 로 해주어야한다. 
  //      })
      ...mapActions(['delayClickBtn'])
    }


[모듈화]

  * 프로젝트가 커질수록 store의 내용이 많아지기 때문에 getters, mutations 등 파일을 따로 만들어 관리한다. (export, import 사용)

  * 앱이 너~무 커서 1개의 store로 관리가 힘들 경우 modules 속성을 사용
        

  
  